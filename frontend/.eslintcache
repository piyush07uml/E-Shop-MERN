[{"/Users/piyush/Desktop/MERN/eshop/frontend/src/index.js":"1","/Users/piyush/Desktop/MERN/eshop/frontend/src/App.js":"2","/Users/piyush/Desktop/MERN/eshop/frontend/src/store.js":"3","/Users/piyush/Desktop/MERN/eshop/frontend/src/components/Header.js":"4","/Users/piyush/Desktop/MERN/eshop/frontend/src/components/Footer.js":"5","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/HomeScreen.js":"6","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/ProductDetailsScreen.js":"7","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/CartScreen.js":"8","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/LoginScreen.js":"9","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/RegisterScreen.js":"10","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/ShippingAddressScreen.js":"11","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/PaymentMethodScreen.js":"12","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/UserProfileScreen.js":"13","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/OrderDetailsScreen.js":"14","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/PlaceOrderScreen.js":"15","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/OrdersAdminScreen.js":"16","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/UsersAdminScreen.js":"17","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/UserUpdateAdminScreen.js":"18","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/ProductsAdminScreen.js":"19","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/ProductEditScreen.js":"20","/Users/piyush/Desktop/MERN/eshop/frontend/src/reducers/productsReducers.js":"21","/Users/piyush/Desktop/MERN/eshop/frontend/src/reducers/userReducers.js":"22","/Users/piyush/Desktop/MERN/eshop/frontend/src/reducers/paymentReducer.js":"23","/Users/piyush/Desktop/MERN/eshop/frontend/src/reducers/cartReducers.js":"24","/Users/piyush/Desktop/MERN/eshop/frontend/src/reducers/orderReducers.js":"25","/Users/piyush/Desktop/MERN/eshop/frontend/src/components/Paginate.js":"26","/Users/piyush/Desktop/MERN/eshop/frontend/src/components/SearchBox.js":"27","/Users/piyush/Desktop/MERN/eshop/frontend/src/components/Loader.js":"28","/Users/piyush/Desktop/MERN/eshop/frontend/src/components/CarouselComp.js":"29","/Users/piyush/Desktop/MERN/eshop/frontend/src/components/Message.js":"30","/Users/piyush/Desktop/MERN/eshop/frontend/src/components/Rating.js":"31","/Users/piyush/Desktop/MERN/eshop/frontend/src/components/HelmetComp.js":"32","/Users/piyush/Desktop/MERN/eshop/frontend/src/components/Products.js":"33","/Users/piyush/Desktop/MERN/eshop/frontend/src/components/FormContainer.js":"34","/Users/piyush/Desktop/MERN/eshop/frontend/src/actions/userActions.js":"35","/Users/piyush/Desktop/MERN/eshop/frontend/src/actions/productsActions.js":"36","/Users/piyush/Desktop/MERN/eshop/frontend/src/actions/cartActions.js":"37","/Users/piyush/Desktop/MERN/eshop/frontend/src/constants/orderConstants.js":"38","/Users/piyush/Desktop/MERN/eshop/frontend/src/constants/productsConstants.js":"39","/Users/piyush/Desktop/MERN/eshop/frontend/src/constants/cartConstants.js":"40","/Users/piyush/Desktop/MERN/eshop/frontend/src/constants/userConstants.js":"41","/Users/piyush/Desktop/MERN/eshop/frontend/src/constants/paymentConstans.js":"42","/Users/piyush/Desktop/MERN/eshop/frontend/src/actions/orderActions.js":"43","/Users/piyush/Desktop/MERN/eshop/frontend/src/components/CheckoutComp.js":"44","/Users/piyush/Desktop/MERN/eshop/frontend/src/actions/paymentActions.js":"45"},{"size":287,"mtime":1611735559000,"results":"46","hashOfConfig":"47"},{"size":2755,"mtime":1612340469000,"results":"48","hashOfConfig":"47"},{"size":2587,"mtime":1612344563000,"results":"49","hashOfConfig":"47"},{"size":2972,"mtime":1634967997863,"results":"50","hashOfConfig":"47"},{"size":409,"mtime":1611722089000,"results":"51","hashOfConfig":"47"},{"size":1974,"mtime":1612672423000,"results":"52","hashOfConfig":"47"},{"size":11074,"mtime":1612505039000,"results":"53","hashOfConfig":"47"},{"size":5704,"mtime":1612504719000,"results":"54","hashOfConfig":"47"},{"size":2299,"mtime":1612504860000,"results":"55","hashOfConfig":"47"},{"size":3511,"mtime":1612505247000,"results":"56","hashOfConfig":"47"},{"size":4043,"mtime":1612672540000,"results":"57","hashOfConfig":"47"},{"size":2607,"mtime":1612673472000,"results":"58","hashOfConfig":"47"},{"size":6567,"mtime":1612505247000,"results":"59","hashOfConfig":"47"},{"size":8254,"mtime":1612504932000,"results":"60","hashOfConfig":"47"},{"size":8987,"mtime":1612673470000,"results":"61","hashOfConfig":"47"},{"size":4076,"mtime":1612504966000,"results":"62","hashOfConfig":"47"},{"size":4092,"mtime":1612505247000,"results":"63","hashOfConfig":"47"},{"size":5772,"mtime":1612505495000,"results":"64","hashOfConfig":"47"},{"size":5288,"mtime":1612505247000,"results":"65","hashOfConfig":"47"},{"size":7998,"mtime":1612505480000,"results":"66","hashOfConfig":"47"},{"size":4389,"mtime":1612344524000,"results":"67","hashOfConfig":"47"},{"size":4367,"mtime":1612337479000,"results":"68","hashOfConfig":"47"},{"size":325,"mtime":1611901028000,"results":"69","hashOfConfig":"47"},{"size":1060,"mtime":1611816095000,"results":"70","hashOfConfig":"47"},{"size":3177,"mtime":1612340027000,"results":"71","hashOfConfig":"47"},{"size":2908,"mtime":1612340424000,"results":"72","hashOfConfig":"47"},{"size":901,"mtime":1612333095000,"results":"73","hashOfConfig":"47"},{"size":386,"mtime":1611723102000,"results":"74","hashOfConfig":"47"},{"size":1559,"mtime":1612346151000,"results":"75","hashOfConfig":"47"},{"size":231,"mtime":1611723330000,"results":"76","hashOfConfig":"47"},{"size":1007,"mtime":1611739347000,"results":"77","hashOfConfig":"47"},{"size":295,"mtime":1612504474000,"results":"78","hashOfConfig":"47"},{"size":911,"mtime":1611739604000,"results":"79","hashOfConfig":"47"},{"size":297,"mtime":1611824873000,"results":"80","hashOfConfig":"47"},{"size":6603,"mtime":1612337839000,"results":"81","hashOfConfig":"47"},{"size":5468,"mtime":1612344850000,"results":"82","hashOfConfig":"47"},{"size":681,"mtime":1611816288000,"results":"83","hashOfConfig":"47"},{"size":1167,"mtime":1612086678000,"results":"84","hashOfConfig":"47"},{"size":1814,"mtime":1612344308000,"results":"85","hashOfConfig":"47"},{"size":123,"mtime":1611900943000,"results":"86","hashOfConfig":"47"},{"size":1780,"mtime":1612164140000,"results":"87","hashOfConfig":"47"},{"size":71,"mtime":1611900943000,"results":"88","hashOfConfig":"47"},{"size":4373,"mtime":1612340090000,"results":"89","hashOfConfig":"47"},{"size":1478,"mtime":1613897304000,"results":"90","hashOfConfig":"47"},{"size":320,"mtime":1611901304000,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1xbwbt0",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"94"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"94"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"94"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"94"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"94"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"94"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"94"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"94"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"94"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"94"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"94"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"94"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"/Users/piyush/Desktop/MERN/eshop/frontend/src/index.js",[],["201","202"],"/Users/piyush/Desktop/MERN/eshop/frontend/src/App.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/store.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/components/Header.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/components/Footer.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/HomeScreen.js",["203","204","205","206"],"import React, { useEffect } from 'react'\nimport { Row, Col, Card, Button, Carousel } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { productListAction } from '../actions/productsActions';\nimport { PRODUCT_LIST_RESET } from '../constants/productsConstants';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport Products from '../components/Products';\nimport Paginate from '../components/Paginate';\nimport CarouselComp from '../components/CarouselComp';\nimport HelmetComp from '../components/HelmetComp';\n\nconst HomeScreen = ({ match }) => {\n\n    const keywords = match.params.keywords || ''\n\n    const page = Number(match.params.page || 1)\n\n    const dispatch = useDispatch();\n    const productList = useSelector(state => state.productList);\n    const { loading, products, pageNumber, pages, error } = productList;\n\n    useEffect(() => {\n        return () => {\n            dispatch({\n                type: PRODUCT_LIST_RESET\n            })\n        }\n    }, [])\n\n\n\n    useEffect(() => {\n        dispatch(productListAction(keywords, page))\n    }, [dispatch, keywords, page])\n\n\n    return (\n        <>\n            <HelmetComp title={`Mask Shop || Home Page`} description=\"Mask Shop\" />\n            <CarouselComp />\n            <h2 className=\"my-3  \">Latest Products</h2>\n\n\n            {loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n                <>\n                    <Row>\n                        {products.map((product) => {\n                            return <Col md={4} lg={3} sm={6} xm={12} className=\"py-3\" key={product._id}>\n                                <Products product={product} />\n                            </Col>\n                        })}\n                    </Row>\n                    <Paginate pageNumber={pageNumber} pages={pages} keywords={keywords} />\n                </>\n            )}\n\n        </>\n    )\n}\n\nexport default HomeScreen\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/ProductDetailsScreen.js",["207"],"import React, { useState, useEffect } from 'react';\nimport { productDetailsAction, reviewProductAction } from '../actions/productsActions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Row, Col, ListGroup, Button, Card, Image, Form } from 'react-bootstrap';\nimport { addTocartAction } from '../actions/cartActions';\nimport { PRODUCT_DETAILS_RESET, PRODUCT_REVIEW_RESET } from '../constants/productsConstants';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport Rating from '../components/Rating';\nimport { Link } from 'react-router-dom';\nimport HelmetComp from '../components/HelmetComp';\n\n\nconst ProductDetailsScreen = ({ match, history }) => {\n\n    const [qty, setQty] = useState(1)\n\n    const productId = match.params.id\n\n    const dispatch = useDispatch();\n\n    const productInfo = useSelector(state => state.productInfo)\n    const { loading, productDetails, error } = productInfo;\n\n    const login = useSelector(state => state.login)\n    const { userInfo } = login\n\n    const reviewProduct = useSelector(state => state.reviewProduct)\n\n    const { loading: loadingReview, success, error: errorReview } = reviewProduct\n\n\n    const [rating, setRating] = useState(\"\");\n    const [comment, setComment] = useState(\"\");\n    const [message, setMessage] = useState(\"\");\n\n\n    useEffect(() => {\n        return () => {\n            dispatch({\n                type: PRODUCT_DETAILS_RESET\n            })\n        }\n    }, [])\n\n\n    useEffect(() => {\n        if (!productDetails || !productDetails.name || productDetails._id !== productId) {\n            dispatch(productDetailsAction(productId))\n        }\n\n        if (success) {\n            dispatch({\n                type: PRODUCT_REVIEW_RESET\n            })\n\n            dispatch(productDetailsAction(productId))\n        }\n\n\n    }, [dispatch, productId, productDetails, success])\n\n\n\n    const addToCartHandler = () => {\n        const cartItem = {\n            product: productId,\n            name: productDetails.name,\n            image: productDetails.image,\n            qty: Number(qty),\n            price: productDetails.price,\n            countInStock: productDetails.countInStock\n        }\n\n        dispatch(addTocartAction(cartItem))\n\n        history.push(\"/cart\")\n\n    }\n\n\n\n    const reviewSubmitHandler = (e) => {\n        e.preventDefault();\n\n        if (!rating || !comment) {\n            setMessage(\"Rating and Comment Both Are Mandatory\")\n        } else {\n\n            dispatch(reviewProductAction(productId, {\n                user: userInfo._id,\n                name: userInfo.name,\n                rating,\n                comment\n            }))\n            setMessage(\"\")\n            setRating(\"\")\n            setComment(\"\")\n        }\n\n    }\n\n    return (\n        <>\n            <HelmetComp title={productDetails.name} description=\"Mask Shop\" />\n            <h2 className=\"text-center py-3\">Product Details</h2>\n            {loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n                <>\n                    <Row className=\"my-3 py-3\">\n                        <Col md={5}>\n                            <Image src={productDetails.image} alt={productDetails.name} fluid />\n                        </Col>\n\n                        <Col md={4}>\n                            <ListGroup variant=\"flush\">\n                                <ListGroup.Item as=\"h3\">\n                                    {productDetails.name}\n                                </ListGroup.Item>\n                                <ListGroup.Item as=\"p\">\n                                    Brand: {productDetails.brand}\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <Rating rating={productDetails.rating} /> Rating from ({productDetails.numReviews}) Reviews\n                            </ListGroup.Item>\n                                <ListGroup.Item as=\"p\">\n                                    Product Code:  {productDetails._id}\n                                </ListGroup.Item>\n                                <ListGroup.Item as=\"h5\">\n                                    Description: {productDetails.description}\n                                </ListGroup.Item>\n                            </ListGroup>\n                        </Col>\n\n                        <Col md={3}>\n                            <Card>\n                                <ListGroup variant=\"flush\">\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>\n                                                Price:\n                                     </Col>\n\n                                            <Col>\n                                                ${productDetails.price}\n                                            </Col>\n\n                                        </Row>\n\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>\n                                                Status:\n                                     </Col>\n\n                                            <Col>\n                                                {productDetails.countInStock === 0 ? `Out Of Stock` : `In Stock`}\n                                            </Col>\n\n                                        </Row>\n\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>\n                                                Qty:\n                                       </Col>\n\n                                            <Col>\n                                                <Form>\n                                                    <Form.Group controlId=\"qty\">\n                                                        <Form.Control\n                                                            as=\"select\"\n                                                            onChange={e => setQty(e.target.value)}\n                                                        >\n                                                            <option>select</option>\n                                                            {[...Array(productDetails.countInStock).keys()].map((x) => {\n                                                                return <option key={x + 1} value={x + 1}>{x + 1}</option>\n                                                            })}\n                                                        </Form.Control>\n                                                    </Form.Group>\n                                                </Form>\n                                            </Col>\n\n                                        </Row>\n\n                                    </ListGroup.Item>\n                                    <ListGroup.Item>\n                                        <Button type=\"button\" variant=\"primary\" className=\"btn btn-block\"\n                                            disabled={productDetails.countInStock === 0}\n                                            onClick={addToCartHandler}\n                                        >Add To Cart</Button>\n                                    </ListGroup.Item>\n\n                                </ListGroup>\n                            </Card>\n                        </Col>\n\n                    </Row>\n\n                    <Row>\n                        <Col md={4}>\n                            {userInfo ? (\n                                <>\n                                    <h2 className=\"my-3\"> Write A Review</h2>\n                                    {message && <Message variant=\"danger\">{message}</Message>}\n                                    {errorReview && <Message variant=\"danger\">{errorReview}</Message>}\n                                    {loadingReview && <Loader />}\n                                    <Form onSubmit={reviewSubmitHandler}>\n                                        <Form.Group controlId=\"rating\">\n                                            <Form.Label>Rating:</Form.Label>\n                                            <Form.Control\n                                                as=\"select\"\n                                                value={rating}\n                                                onChange={e => setRating(e.target.value)}\n                                            >\n                                                <option>Select...</option>\n                                                <option value=\"1\">1 Poor</option>\n                                                <option value=\"2\">2 Fair</option>\n                                                <option value=\"3\">3 Good</option>\n                                                <option value=\"4\">4 Very Good</option>\n                                                <option value=\"5\">5 Excellent</option>\n\n                                            </Form.Control>\n                                        </Form.Group>\n\n                                        <Form.Group controlId=\"comment\">\n                                            <Form.Label>Comment</Form.Label>\n                                            <Form.Control\n                                                as=\"textarea\"\n                                                value={comment}\n                                                onChange={e => setComment(e.target.value)}\n                                            />\n                                        </Form.Group>\n\n                                        <Button type=\"submit\" variant=\"primary\">Submit</Button>\n\n                                    </Form>\n                                </>\n                            ) : (\n                                    <h4 className=\"my-3\"> <Link to=\"/login\">Log In</Link> to write a review </h4>\n                                )}\n                        </Col>\n                        <Col md={2}></Col>\n                        <Col md={6}>\n                            <h2 className=\"my-3\">Customer Reviews</h2>\n\n                            {productDetails.reviews.map((review) => {\n                                return <div key={review._id} className=\"py-3\">\n                                    <Rating rating={review.rating} /> <br></br>\n                                    {review.name} <br />\n                                    {review.createdAt.substring(0, 10)}\n\n                                    <h4 className=\"mt-3\">{review.comment}</h4>\n                                    <div style={{ border: \"1px solid gray\" }}></div>\n                                </div>\n                            })}\n\n\n                        </Col>\n                    </Row>\n                </>\n            )}\n\n\n        </>\n    )\n}\n\nexport default ProductDetailsScreen\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/CartScreen.js",["208","209"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Row, Col, Card, ListGroup, Button, Image, Form } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { addTocartAction, deleteCartAction } from '../actions/cartActions';\nimport Message from '../components/Message';\nimport HelmetComp from '../components/HelmetComp';\n\n\nconst CartScreen = () => {\n\n    // const [qty, setQty] = useState(1)\n\n    const dispatch = useDispatch();\n\n    const cart = useSelector(state => state.cart);\n\n    const { cartItems } = cart\n\n\n\n    const deleteCartHandler = (id) => {\n        dispatch(deleteCartAction(id))\n    }\n\n    return (\n        <>\n            <HelmetComp title={`Cart`} description=\"Mask Shop\" />\n            {cartItems.length === 0 ? (\n                <Message>You Cart Is Empty <Link to=\"/\">Go Back</Link></Message>\n            ) : (\n                    <Row>\n                        <Col md={9}>\n                            <h2 className=\"py-3\">Cart</h2>\n                            <ListGroup variant=\"flush\">\n                                {cartItems.map((item) => {\n                                    return <ListGroup.Item key={item.product}>\n                                        <Row>\n                                            <Col md={2}>\n                                                <Link to={`/productDetails/${item.product}`}>\n                                                    <Image src={item.image} alt={item.name} fluid />\n                                                </Link>\n\n                                            </Col>\n\n                                            <Col md={3}>\n                                                <Link to={`/productDetails/${item.product}`}>\n                                                    <h6>{item.name}</h6>\n                                                </Link>\n                                            </Col>\n\n                                            <Col md={3}>\n                                                <h6>{item.qty} X $ {item.price} = ${(item.qty * item.price).toFixed(2)}</h6>\n                                            </Col>\n\n                                            <Col md={2}>\n                                                <Form>\n                                                    <Form.Group controlId=\"updateCart\">\n                                                        <Form.Control\n                                                            as=\"select\"\n                                                            label=\"qty\"\n                                                            onChange={e => dispatch(addTocartAction({ ...item, qty: Number(e.target.value) }))}\n                                                        >\n                                                            <option>Qty</option>\n                                                            {[...Array(item.countInStock).keys()].map((x) => {\n                                                                return <option value={x + 1} key={x + 1}>{x + 1}</option>\n                                                            })}\n                                                        </Form.Control>\n                                                    </Form.Group>\n                                                </Form>\n                                            </Col>\n\n                                            <Col md={2} className=\"text-center\">\n                                                <i className=\"far fa-trash-alt fa-2x\" onClick={() => deleteCartHandler(item.product)}></i>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                })}\n\n                            </ListGroup>\n                        </Col>\n\n                        <Col md={3}>\n                            <h2 className=\"py-3\">Cart Total</h2>\n                            <Card>\n                                <ListGroup variant=\"flush\">\n                                    <ListGroup.Item>\n                                        <h4>Total Items ({cartItems.length})</h4>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <h4>Total Quantity ({cartItems.reduce((acc, item) => acc + item.qty, 0)})</h4>\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>\n                                                <h4>Total:</h4>\n                                            </Col>\n\n                                            <Col>\n                                                <h4> ${cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)}</h4>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                    <ListGroup.Item>\n                                        <Link to=\"/shippingAddress?redirect=shipping\">\n                                            <Button variant=\"primary\" className=\"btn btn-block\">Checkout</Button>\n                                        </Link>\n                                    </ListGroup.Item>\n\n                                </ListGroup>\n                            </Card>\n                        </Col>\n                    </Row>\n\n                )}\n        </>\n    )\n}\n\nexport default CartScreen\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/LoginScreen.js",["210"],"import React, { useState, useEffect } from 'react'\nimport FormContainer from '../components/FormContainer';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loginAction } from '../actions/userActions';\nimport { Link } from 'react-router-dom';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport HelmetComp from '../components/HelmetComp';\n\nconst LoginScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n    const login = useSelector(state => state.login);\n\n    const { loading, userInfo, error } = login\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(\"/\");\n        }\n    }, [userInfo])\n\n    const loginHandler = (e) => {\n        e.preventDefault();\n\n        dispatch(loginAction({ email, password }))\n    }\n\n\n    return (\n\n        <FormContainer>\n            <HelmetComp title={`Log In`} description=\"Mask Shop\" />\n            <h2 className=\"my-3\">Sign In</h2>\n            {loading && <Loader />}\n            {error && <Message variant=\"danger\">{error}</Message>}\n            <Form onSubmit={loginHandler}>\n                <Form.Group controlId=\"email\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control\n                        type=\"email\"\n                        placeholder=\"Enter Email\"\n                        value={email}\n                        onChange={e => setEmail(e.target.value)}\n                    />\n                </Form.Group>\n\n                <Form.Group controlId=\"password\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        placeholder=\"Enter Password\"\n                        value={password}\n                        onChange={e => setPassword(e.target.value)}\n                    />\n                </Form.Group>\n                <Button type=\"submit\" variant=\"primary\" >\n                    Log In\n                </Button>\n            </Form>\n            <p className=\"py-3\">New User ? <Link to=\"/register\">Register Here</Link></p>\n        </FormContainer>\n\n    )\n}\n\nexport default LoginScreen\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/RegisterScreen.js",["211","212"],"import React, { useState, useEffect } from 'react';\nimport FormContainer from '../components/FormContainer';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userRegisterAction } from '../actions/userActions';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport HelmetComp from '../components/HelmetComp';\n\n\n\n\nconst RegisterScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    const userRegister = useSelector(state => state.userRegister);\n\n    const login = useSelector(state => state.login)\n    const { userInfo } = login\n\n    const { loading, success, error } = userRegister;\n\n    const [name, setName] = useState(\"\")\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\n    const [message, setMessage] = useState(\"\")\n\n\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(\"/\")\n        }\n    }, [userInfo])\n\n\n    const registerHandler = (e) => {\n        e.preventDefault();\n\n        if (password !== confirmPassword) {\n            setMessage(\"Passwords Do Not Match\")\n        } else {\n            setMessage('');\n\n            dispatch(userRegisterAction({\n                name,\n                email,\n                password\n            }))\n        }\n\n    }\n\n    return (\n        <FormContainer>\n            <HelmetComp title={`Sign Up`} description=\"Mask Shop\" />\n\n            <h2 className=\"my-3\">Sign Up</h2>\n            {loading && <Loader />}\n            {error && <Message variant=\"danger\">{error}</Message>}\n            {message && <Message variant=\"danger\">{message}</Message>}\n            <Form onSubmit={registerHandler}>\n                <Form.Group controlId=\"name\">\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Enter Name\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    />\n                </Form.Group>\n\n                <Form.Group controlId=\"email\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control\n                        type=\"email\"\n                        placeholder=\"Enter Email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                </Form.Group>\n\n                <Form.Group controlId=\"password\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        placeholder=\"Enter Password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                </Form.Group>\n\n                <Form.Group controlId=\"confirmpassword\">\n                    <Form.Label>Confirm Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        placeholder=\"Confirm Password\"\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                    />\n                </Form.Group>\n                <Button type=\"submit\" variant=\"primary\">Register</Button>\n            </Form>\n        </FormContainer>\n    )\n}\n\nexport default RegisterScreen\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/ShippingAddressScreen.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/PaymentMethodScreen.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/UserProfileScreen.js",["213","214","215"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Row, Col, Form, Button, Table } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { updateUserAction } from '../actions/userActions';\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\nimport { ORDER_USER_RESET } from '../constants/orderConstants';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { userOrdersAction } from '../actions/orderActions';\nimport Paginate from '../components/Paginate';\nimport HelmetComp from '../components/HelmetComp';\n\nconst UserProfileScreen = ({ history, match }) => {\n\n    const login = useSelector(state => state.login)\n    const { userInfo } = login\n\n    const page = match.params.page\n\n\n    const [name, setName] = useState(userInfo ? userInfo.name : \"\");\n    const [email, setEmail] = useState(userInfo ? userInfo.email : \"\");\n    const [password, setPassword] = useState(\"\");\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\n    const [message, setMessage] = useState(\"\");\n\n    const dispatch = useDispatch();\n\n    const updateUser = useSelector(state => state.updateUser);\n    const { loading, success, error } = updateUser\n\n    const userOrders = useSelector(state => state.userOrders)\n    const { loading: loadingOrders, orders, pages, pageNumber, error: errorOrders } = userOrders\n\n\n    useEffect(() => {\n        return () => {\n            dispatch({\n                type: ORDER_USER_RESET\n            })\n        }\n    }, [])\n\n    useEffect(() => {\n        dispatch(userOrdersAction(page))\n    }, [page])\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push(\"/login\")\n        } else {\n\n            if (orders.length === 0) {\n                dispatch(userOrdersAction(page))\n            }\n        }\n    }, [dispatch, history, userInfo, success, orders, page])\n\n\n\n\n    const updateUserHandler = (e) => {\n        e.preventDefault();\n\n        if (password !== confirmPassword) {\n            setMessage(\"Passwords Do Not Match\")\n        } else {\n            dispatch(updateUserAction({\n                name, email, password\n            }))\n            setMessage(\"\")\n        }\n\n    }\n\n    return (\n        <>\n            <HelmetComp title={`Profile || User`} description=\"Mask Shop\" />\n            <Row>\n                <Col md={3}>\n                    <h2 className=\"my-3\">Update Profile</h2>\n                    {message && <Message variant=\"danger\">{message}</Message>}\n                    {error && <Message variant=\"danger\">{error}</Message>}\n                    {loading && <Loader />}\n                    <Form onSubmit={updateUserHandler} className=\"mr-3\">\n                        <Form.Group controlId=\"name\">\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Name\"\n                                value={name}\n                                onChange={e => setName(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"email\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                placeholder=\"Enter Email\"\n                                value={email}\n                                onChange={e => setEmail(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"password\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Enter Password\"\n                                value={password}\n                                onChange={e => setPassword(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"confirmpassword\">\n                            <Form.Label>Confirm Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Confirm Password\"\n                                value={confirmPassword}\n                                onChange={e => setConfirmPassword(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Button type=\"submit\" variant=\"primary\">Update</Button>\n                    </Form>\n                </Col>\n\n                <Col md={9}>\n                    <h2 className=\"my-3 text-center\">Orders</h2>\n                    {loadingOrders ? <Loader /> : errorOrders ? <Message variant=\"danger\">{errorOrders}</Message> : (\n                        <>\n                            <Table hover bordered responsive className=\"table-sm text-center\">\n                                <thead>\n                                    <tr>\n                                        <th>ID</th>\n                                        <th>DATE</th>\n                                        <th>Name</th>\n                                        <th>PAID BY</th>\n                                        <th>DELIVERY</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {orders.map((order) => {\n                                        return <tr key={order._id}>\n                                            <td><Link to={`/orderDetails/${order._id}`}>{order._id}</Link></td>\n                                            <td>{order.createdAt.substring(0, 10)}</td>\n                                            <td>{order.user.name}</td>\n                                            <td><i class=\"fab fa-cc-paypal fa-2x\" style={{ color: '#348ceb' }}></i></td>\n                                            <td>{order.isDelivered ? `Delivered` : 'Not Delivered'}</td>\n                                        </tr>\n                                    })}\n                                </tbody>\n                            </Table>\n                            <Paginate pageNumber={pageNumber} pages={pages} userOrders={true} />\n                        </>\n                    )}\n                </Col>\n\n            </Row>\n        </>\n    )\n}\n\nexport default UserProfileScreen\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/OrderDetailsScreen.js",["216"],"import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Row, Col, ListGroup, Card, Image } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { orderDetailsAction } from '../actions/orderActions';\nimport { ORDER_DETAILS_RESET } from '../constants/orderConstants';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport HelmetComp from '../components/HelmetComp';\n\n\n\nconst OrderDetailsScreen = ({ history, match }) => {\n\n    const orderId = match.params.id\n\n    const dispatch = useDispatch()\n\n    const login = useSelector(state => state.login)\n    const { userInfo } = login;\n\n    const orderDetails = useSelector(state => state.orderDetails);\n\n    const { loading, orderInfo, error } = orderDetails;\n\n    useEffect(() => {\n        return () => {\n            dispatch({\n                type: ORDER_DETAILS_RESET\n            })\n        }\n    }, [])\n\n\n    useEffect(() => {\n\n        if (!userInfo) {\n            history.push(\"/login\")\n        } else {\n            if (!orderInfo || !orderInfo._id) {\n                dispatch(orderDetailsAction(orderId))\n\n\n            }\n        }\n\n    }, [dispatch, history, userInfo, orderInfo, orderId])\n\n\n\n\n    return (\n        <>\n            <HelmetComp title={`Order Details`} description=\"Mask Shop\" />\n            {loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n                <Row>\n                    <Col md={8}>\n                        <h1 className=\"my-3\">Order</h1>\n                        {(orderInfo.user) && (\n                            <Row>\n                                <Col md={6}>\n                                    <ListGroup variant=\"flush\">\n                                        <ListGroup.Item>\n                                            <h4>User Details</h4>\n                                        </ListGroup.Item>\n                                        <ListGroup.Item style={{ fontSize: \"1.1rem\" }}>\n                                            Name: {orderInfo.user.name},<br></br>\n                                            Email: {orderInfo.user.email} <br></br>\n                                            Address: {orderInfo.shippingAddress.address} {\" \"}, {orderInfo.shippingAddress.city} <br></br>\n                                            {orderInfo.shippingAddress.postalCode},{\" \"} {orderInfo.shippingAddress.country}.\n                        </ListGroup.Item>\n                                    </ListGroup>\n                                </Col>\n                            </Row>\n\n                        )}\n                        <Row>\n                            <Col md={6}>\n                                <ListGroup variant=\"flush\" className=\"my-3\">\n                                    <ListGroup.Item><h4>Payment Method:</h4></ListGroup.Item>\n\n                                    <ListGroup.Item style={{ fontSize: \"1.1rem\" }}>\n                                        Method: {orderInfo.paymentMethod}\n                                    </ListGroup.Item>\n                                </ListGroup>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md={6}>\n                                <ListGroup variant=\"flush\" className=\"my-3\">\n                                    <ListGroup.Item><h4>Order Status:</h4></ListGroup.Item>\n\n                                    <ListGroup.Item style={{ fontSize: \"1.1rem\" }}>\n                                        ORDER ID : {orderInfo._id}\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item style={{ fontSize: \"1.1rem\" }}>\n                                        Paid By : {orderInfo.paymentMethod} {orderInfo.createdAt}\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item style={{ fontSize: \"1.1rem\" }}>\n                                        Delivery : {orderInfo.isDelivered ? `Delivered At ${orderInfo.deliveredAt}` : `Not Delivered`}\n                                    </ListGroup.Item>\n                                </ListGroup>\n                            </Col>\n                        </Row>\n\n                        <Row>\n                            <Col md={10}>\n                                <ListGroup variant=\"flush\">\n                                    <ListGroup.Item>\n                                        <h4>Order Items:</h4>\n                                    </ListGroup.Item>\n                                    {orderInfo.orderItems.map((item) => {\n                                        return <ListGroup.Item key={item.product}>\n                                            <Row>\n                                                <Col md={2}>\n                                                    <Link to={`/productDetails/${item.product}`}><Image src={item.image} alt={item.name} fluid /></Link>\n                                                </Col>\n                                                <Col md={6}>\n                                                    <Link to={`/productDetails/${item.product}`}><p>{item.name}</p></Link>\n                                                </Col>\n                                                <Col md={4}>\n                                                    <p>{item.qty} X $ {item.price} = $ {item.qty * item.price}</p>\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n\n                                    })}\n                                </ListGroup>\n\n                            </Col>\n                        </Row>\n\n                    </Col>\n\n                    <Col md={4}>\n\n                        <h2 className=\"my-3\">Order Total</h2>\n\n                        <Card>\n                            <ListGroup variant=\"flush\" style={{ fontSize: \"1.1rem\" }}>\n                                <ListGroup.Item>\n                                    <Row>\n                                        <Col>\n                                            Items Price:\n                                      </Col>\n                                        <Col>\n                                            $ {orderInfo.orderItems.reduce((acc, item) => acc + item.qty * item.price, 0)}\n                                        </Col>\n                                    </Row>\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <Row>\n                                        <Col>\n                                            Tax Price:\n                                      </Col>\n                                        <Col>\n                                            $ {orderInfo.taxPrice}\n                                        </Col>\n                                    </Row>\n                                </ListGroup.Item>\n\n                                <ListGroup.Item>\n                                    <Row>\n                                        <Col>\n                                            Delivery Price:\n                                      </Col>\n                                        <Col>\n                                            $ {orderInfo.deliveryPrice}\n                                        </Col>\n                                    </Row>\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    <Row>\n                                        <Col>\n                                            Total Price:\n                                    </Col>\n                                        <Col>\n                                            $ {orderInfo.totalPrice}\n                                        </Col>\n                                    </Row>\n                                </ListGroup.Item>\n\n                            </ListGroup>\n                        </Card>\n\n                    </Col>\n                </Row>\n            )}\n        </>\n    )\n}\n\nexport default OrderDetailsScreen\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/PlaceOrderScreen.js",["217","218"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Row, Col, ListGroup, Card, Image } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { createOrderAction } from '../actions/orderActions';\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants';\nimport axios from 'axios';\nimport { PayPalButton } from 'react-paypal-button-v2'\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport HelmetComp from '../components/HelmetComp';\nimport CheckoutComp from '../components/CheckoutComp';\n\n\n\nconst PlaceOrderScreen = ({ history, location }) => {\n\n\n    const [sdkReady, setSdkReady] = useState(false)\n\n    const dispatch = useDispatch()\n\n    const login = useSelector(state => state.login)\n    const { userInfo } = login;\n\n    const userAddress = useSelector(state => state.userAddress)\n    const { shippingAddress } = userAddress;\n\n    const payment = useSelector(state => state.payment);\n    const { paymentMethod } = payment;\n\n    const cart = useSelector(state => state.cart);\n    const { cartItems } = cart\n\n    const createOrder = useSelector(state => state.createOrder)\n\n    const { loading, order, success, error } = createOrder\n\n    const redirect = location.search ? location.search.split(\"=\")[1] : null\n\n    cartItems.itemsPrice = Number(cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)).toFixed(2);\n    cartItems.taxPrice = Number(0.18 * cartItems.itemsPrice).toFixed(2)\n    cartItems.deliveryPrice = Number(cartItems.itemsPrice < 50 ? 20 : 0)\n    cartItems.totalPrice = (Number(cartItems.itemsPrice) + Number(cartItems.taxPrice) + Number(cartItems.deliveryPrice)).toFixed(2)\n\n\n\n    useEffect(() => {\n        if (!userInfo || !redirect) {\n            history.push(\"/login\")\n        } else {\n\n            if (success) {\n                dispatch({\n                    type: ORDER_CREATE_RESET\n                })\n                history.push(`/orderDetails/${order._id}`)\n\n            } else {\n                const buildScript = async () => {\n                    const { data: clientId } = await axios.get(\"/paypal/clientId\");\n\n                    const script = document.createElement('script');\n                    script.type = \"text/javascript\"\n                    script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\n                    script.async = true;\n                    script.onload = () => {\n                        setSdkReady(true)\n                    }\n\n                    document.body.appendChild(script)\n                }\n\n                if (!window.paypal) {\n\n                    buildScript()\n                    console.log(sdkReady)\n                } else {\n                    setSdkReady(true)\n                }\n            }\n\n\n\n\n\n        }\n    }, [history, userInfo, redirect, success])\n\n\n    const createOrderHandler = (paymentResult) => {\n        dispatch(createOrderAction({\n            orderItems: cartItems,\n            paymentMethod,\n            shippingAddress,\n            paymentResult,\n            taxPrice: cartItems.taxPrice,\n            deliveryPrice: cartItems.deliveryPrice,\n            totalPrice: cartItems.totalPrice\n        }))\n\n\n    }\n\n    return (\n        <>\n            <CheckoutComp step1 step2 step3 step4 />\n            <HelmetComp title={`Place Order`} description=\"Mask Shop\" />\n            <Row>\n                <Col md={8}>\n                    <h1 className=\"my-3\">Order</h1>\n\n                    <Row>\n                        <Col md={6}>\n                            <ListGroup variant=\"flush\">\n                                <ListGroup.Item>\n                                    <h4>User Details</h4>\n                                </ListGroup.Item>\n                                <ListGroup.Item style={{ fontSize: \"1.1rem\" }}>\n                                    Name: {userInfo.name},<br></br>\n                                    Email: {userInfo.email} <br></br>\n                                    Address: {shippingAddress.address} {\" \"}, {shippingAddress.city} <br></br>\n                                    {shippingAddress.postalCode},{\" \"} {shippingAddress.country}.\n                        </ListGroup.Item>\n                            </ListGroup>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col md={6}>\n                            <ListGroup variant=\"flush\" className=\"my-3\">\n                                <ListGroup.Item><h4>Payment Method:</h4></ListGroup.Item>\n\n                                <ListGroup.Item style={{ fontSize: \"1.1rem\" }}>\n                                    Method: {paymentMethod}\n                                </ListGroup.Item>\n                            </ListGroup>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col md={10}>\n                            <ListGroup variant=\"flush\">\n                                <ListGroup.Item>\n                                    <h4>Order Items:</h4>\n                                </ListGroup.Item>\n                                {cartItems.map((item) => {\n                                    return <ListGroup.Item key={item.product}>\n                                        <Row>\n                                            <Col md={2}>\n                                                <Link to={`/productDetails/${item.product}`}><Image src={item.image} alt={item.name} fluid /></Link>\n                                            </Col>\n                                            <Col md={6}>\n                                                <Link to={`/productDetails/${item.product}`}><p>{item.name}</p></Link>\n                                            </Col>\n                                            <Col md={4}>\n                                                <p>{item.qty} X $ {item.price} = $ {item.qty * item.price}</p>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n\n                                })}\n                            </ListGroup>\n\n                        </Col>\n                    </Row>\n\n                </Col>\n\n                <Col md={4}>\n\n                    <h2 className=\"my-3\">Order Total</h2>\n\n                    <Card>\n                        <ListGroup variant=\"flush\" style={{ fontSize: \"1.1rem\" }}>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>\n                                        Items Price:\n                                      </Col>\n                                    <Col>\n                                        $ {cartItems.itemsPrice}\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>\n                                        Tax Price:\n                                      </Col>\n                                    <Col>\n                                        $ {cartItems.taxPrice}\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>\n                                        Delivery Price:\n                                      </Col>\n                                    <Col>\n                                        $ {cartItems.deliveryPrice}\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>\n                                        Total Price:\n                                    </Col>\n                                    <Col>\n                                        $ {cartItems.totalPrice}\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n                            <ListGroup.Item>\n                                {!sdkReady ? <Loader /> : (\n                                    <PayPalButton\n                                        amount={cartItems.totalPrice}\n                                        onSuccess={createOrderHandler}\n                                    />\n                                )}\n                            </ListGroup.Item>\n                            {error && <Message variant=\"danger\">{error}</Message>}\n                        </ListGroup>\n                    </Card>\n\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nexport default PlaceOrderScreen\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/OrdersAdminScreen.js",["219","220"],"import React, { useEffect } from 'react'\nimport { Table, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { adminOrdersAction, updateOrderAction } from '../actions/orderActions';\nimport { ORDER_ADMIN_UPDATE_RESET, ORDER_ADMIN_RESET } from '../constants/orderConstants';\nimport { Link } from 'react-router-dom'\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport Paginate from '../components/Paginate';\nimport HelmetComp from '../components/HelmetComp';\n\n\n\nconst OrdersAdminScreen = ({ history, match }) => {\n    const dispatch = useDispatch();\n\n    const page = match.params.page || 1\n\n    const login = useSelector(state => state.login)\n    const { userInfo } = login\n\n    const adminOrders = useSelector(state => state.adminOrders);\n    const { loading, orders, pageNumber, pages, error } = adminOrders\n\n    const updateOrder = useSelector(state => state.updateOrder);\n\n    const { loading: loadingUpdate, success, error: errorUpdate } = updateOrder\n\n\n    useEffect(() => {\n        return () => {\n            dispatch({\n                type: ORDER_ADMIN_RESET\n            })\n        }\n    }, [])\n\n\n    useEffect(() => {\n        dispatch(adminOrdersAction(page));\n    }, [page])\n\n\n    useEffect(() => {\n\n        if (!userInfo || !userInfo.isAdmin) {\n            history.push(\"/login\")\n\n        } else {\n\n            if (success) {\n                dispatch({\n                    type: ORDER_ADMIN_UPDATE_RESET\n                })\n                dispatch(adminOrdersAction(page));\n            }\n\n\n            if (orders.length === 0) {\n                dispatch(adminOrdersAction(page));\n            }\n\n        }\n    }, [dispatch, history, orders, userInfo, success, page])\n\n\n    const updateOrderHandler = (id) => [\n        dispatch(updateOrderAction(id))\n    ]\n\n    return (\n        <>\n            <HelmetComp title={`Orders || Admin`} description=\"Mask Shop\" />\n            {loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n                <>\n                    <h2 className=\"my-3\">Orders</h2>\n                    {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\n                    {loadingUpdate && <Loader />}\n                    <Table hover bordered responsive className=\"table-sm text-center\">\n                        <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>DATE</th>\n                                <th>Name</th>\n                                <th>PAID BY</th>\n                                <th>Delivered</th>\n                                <th>Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {orders.map((order) => {\n                                return <tr key={order._id}>\n                                    <td><Link to={`/orderDetails/${order._id}`}>{order._id}</Link></td>\n                                    <td>{order.createdAt.substring(0, 10)}</td>\n                                    <td>{order.user.name}</td>\n                                    <td><i className=\"fab fa-cc-paypal fa-2x\" style={{ color: '#348ceb' }}></i></td>\n                                    <td>{order.isDelivered ? <i className=\"fas fa-check\" style={{ color: 'green' }}></i> :\n                                        <i className=\"fas fa-times\" style={{ color: 'red' }}></i>}</td>\n                                    <td><Button variant=\"primary\"\n                                        onClick={() => updateOrderHandler(order._id)}\n                                    >{order.isDelivered ? `Mark As Not Delivered` : `Mark As Delivered`}</Button></td>\n                                </tr>\n                            })}\n                        </tbody>\n                    </Table>\n\n                    <Paginate pageNumber={pageNumber} pages={pages} orderAdmin={true} />\n\n                </>\n            )}\n        </>\n    )\n}\n\nexport default OrdersAdminScreen\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/UsersAdminScreen.js",["221","222","223"],"import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Table, Button } from 'react-bootstrap';\nimport { adminUsersAction, userDeleteAdminAction } from '../actions/userActions';\nimport { USERS_ADMIN_RESET, USER_ADMIN_DELETE_RESET } from '../constants/userConstants';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { Link } from 'react-router-dom';\nimport Paginate from '../components/Paginate';\nimport HelmetComp from '../components/HelmetComp';\n\nconst UsersAdminScreen = ({ history, match }) => {\n\n    const page = match.params.page || 1\n\n    const dispatch = useDispatch();\n\n    const login = useSelector(state => state.login)\n    const { userInfo } = login\n\n    const adminUsers = useSelector(state => state.adminUsers)\n    const { loading, users, pageNumber, pages, error } = adminUsers\n\n    const userDeleteAdmin = useSelector(state => state.userDeleteAdmin)\n\n    const { loading: loadingDelete, success, error: errorDelete } = userDeleteAdmin\n\n    useEffect(() => {\n        return () => {\n            dispatch({\n                type: USERS_ADMIN_RESET\n            })\n        }\n    }, [])\n\n    useEffect(() => {\n        dispatch(adminUsersAction(page))\n    }, [page])\n\n\n    useEffect(() => {\n        if (!userInfo || !userInfo.isAdmin) {\n            history.push(\"/login\")\n        } else {\n\n            if (users.length === 0) {\n                dispatch(adminUsersAction(page))\n            }\n\n            if (success) {\n                dispatch({\n                    type: USER_ADMIN_DELETE_RESET\n                })\n                dispatch(adminUsersAction(page))\n            }\n\n        }\n    }, [dispatch, history, userInfo, success, page])\n\n\n\n    const userDeleteHandler = (id) => {\n        dispatch(userDeleteAdminAction(id));\n    }\n\n\n    return (\n        <>\n            <HelmetComp title={`Users || Admin`} description=\"Mask Shop\" />\n\n            <h2 className=\"my-3\">Users</h2>\n            {loadingDelete && <Loader />}\n            {errorDelete && <Message variant=\"danger\">{errorDelete}</Message>}\n            {loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n\n                <Table hover bordered responsive className=\"table-sm text-center\">\n\n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>Name</th>\n                            <th>Email</th>\n                            <th>ADMIN</th>\n                            <th></th>\n\n                        </tr>\n                    </thead>\n\n                    <tbody>\n                        {users.map((user) => {\n                            return <tr key={user._id}>\n                                <td>{user._id}</td>\n                                <td>{user.name}</td>\n                                <td>{user.email}</td>\n                                <td>{user.isAdmin ? <i className=\"fas fa-check\" style={{ color: 'green' }}></i> :\n                                    <i className=\"fas fa-times\" style={{ color: 'green' }}></i>\n                                }</td>\n                                <td>\n                                    <Link to={`/admin/userUpdate/${user._id}?page=${page}`}>\n                                        <Button type=\"button\" className=\"btn btn-light\" >\n                                            <i className=\"fas fa-edit\"></i>\n                                        </Button>\n                                    </Link>\n\n                                    <Button type=\"button\" className=\"btn btn-danger\" onClick={() => userDeleteHandler(user._id)} >\n                                        <i className=\"fas fa-trash\"></i>\n                                    </Button>\n                                </td>\n                            </tr>\n                        })}\n                    </tbody>\n\n                </Table>\n            )}\n\n            <Paginate pageNumber={pageNumber} pages={pages} userAdmin={true} />\n        </>\n    )\n}\n\nexport default UsersAdminScreen\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/UserUpdateAdminScreen.js",["224","225"],"import React, { useState, useEffect } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { userDetailsAdminAction, userUpdateAdminAction } from '../actions/userActions';\nimport { USER_ADMIN_DETAILS_RESET, USER_ADMIN_UPDATE_RESET } from '../constants/userConstants';\nimport FormContainer from '../components/FormContainer';\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { Link } from 'react-router-dom';\nimport HelmetComp from '../components/HelmetComp';\n\nconst UserUpdateAdminScreen = ({ match, history, location }) => {\n\n    const userId = match.params.id\n\n    const page = location.search ? location.search.split(\"=\")[1] : 1\n\n    const dispatch = useDispatch();\n\n    const login = useSelector(state => state.login);\n    const { userInfo } = login\n\n    const userDetailsAdmin = useSelector(state => state.userDetailsAdmin);\n\n    const { loading, user, error } = userDetailsAdmin;\n\n    const userUpdateAdmin = useSelector(state => state.userUpdateAdmin)\n\n    const { loading: loadingUpdate, success, error: errorUpdate } = userUpdateAdmin\n\n\n    const [name, setName] = useState(\"\")\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [confirmPassword, setConfirmPassword] = useState(\"\")\n    const [isAdmin, setIsAdmin] = useState(\"\")\n    const [message, setMessage] = useState(\"\");\n\n\n\n    useEffect(() => {\n\n        return () => {\n            dispatch({\n                type: USER_ADMIN_DETAILS_RESET\n            })\n        }\n\n    }, [])\n\n\n    useEffect(() => {\n        if (!userInfo || !userInfo.isAdmin) {\n            history.push(\"/login\")\n        } else {\n\n\n            if (!user || !user.name) {\n                dispatch(userDetailsAdminAction(userId))\n            } else {\n                setName(user.name);\n                setEmail(user.email);\n                setIsAdmin(user.isAdmin)\n            }\n\n            if (success) {\n                dispatch({\n                    type: USER_ADMIN_UPDATE_RESET\n                })\n\n                history.push(`/admin/users/${page}`)\n            }\n\n\n        }\n    }, [dispatch, history, userInfo, user, success])\n\n\n    const updateUserAdminHandler = (e) => {\n        e.preventDefault();\n\n        if (password !== confirmPassword) {\n\n            setMessage(\"Passwords Do Not Match\")\n\n        } else {\n\n            dispatch(userUpdateAdminAction({\n                _id: userId,\n                name,\n                email,\n                password,\n                isAdmin\n            }))\n\n            setMessage(\"\")\n        }\n    }\n\n\n\n    return (\n        <>\n            <HelmetComp title={`${user.name}`} description=\"Mask Shop\" />\n            <Link to={`/admin/users/1`}>\n                <Button type=\"button\" variant=\"light\">Back</Button>\n            </Link>\n\n            {loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n                <FormContainer>\n\n                    <h2 className=\"my-3\">Update User</h2>\n\n                    {loadingUpdate && <Loader />}\n                    {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\n                    {message && <Message variant=\"danger\">{message}</Message>}\n\n                    <Form onSubmit={updateUserAdminHandler}>\n                        <Form.Group controlId=\"name\">\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Name\"\n                                value={name}\n                                onChange={e => setName(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"email\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                placeholder=\"Enter Email\"\n                                value={email}\n                                onChange={e => setEmail(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"password\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Enter Password\"\n                                value={password}\n                                onChange={e => setPassword(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"confirmPassword\">\n                            <Form.Label>Confirm Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Confirm Password\"\n                                value={confirmPassword}\n                                onChange={e => setConfirmPassword(e.target.value)}\n                            />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"formBasicCheckbox\" className=\"ml-3\">\n                            <Form.Check type=\"checkbox\" label=\"Is Admin\"\n                                checked={isAdmin}\n                                onChange={e => setIsAdmin(e.target.checked)}\n                            />\n                        </Form.Group>\n\n                        <Button type=\"submit\" variant=\"primary\">Update</Button>\n\n\n\n                    </Form>\n                </FormContainer>\n            )}\n\n        </>\n    )\n}\n\nexport default UserUpdateAdminScreen\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/ProductsAdminScreen.js",["226","227","228","229"],"import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Table, Button, Row, Col } from 'react-bootstrap';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { Link } from 'react-router-dom';\nimport { productListAction, createProductAction, deleteProductAction } from '../actions/productsActions';\nimport { PRODUCT_LIST_RESET, PRODUCT_CREATE_ADMIN_RESET, PRODUCT_DELETE_ADMIN_RESET } from '../constants/productsConstants';\nimport Paginate from '../components/Paginate.js'\nimport HelmetComp from '../components/HelmetComp';\n\n\nconst ProductsAdminScreen = ({ history, match }) => {\n\n    const page = match.params.page || 1\n\n    const dispatch = useDispatch();\n\n    const login = useSelector(state => state.login)\n    const { userInfo } = login\n\n    const productList = useSelector(state => state.productList)\n    const { loading, products, pageNumber, pages, error } = productList\n\n    const createProduct = useSelector(state => state.createProduct)\n\n    const { loading: loadingCreate, success: successCreate, error: errorCreate } = createProduct\n\n    const deleteProduct = useSelector(state => state.deleteProduct);\n    const { loading: loadingDelete, success: successDelete, error: errorDelete } = deleteProduct\n\n    useEffect(() => {\n        return () => {\n            dispatch({\n                type: PRODUCT_LIST_RESET\n            })\n        }\n    }, [])\n\n    useEffect(() => {\n        dispatch(productListAction('', page))\n    }, [page])\n\n\n    useEffect(() => {\n        if (!userInfo || !userInfo.isAdmin) {\n            history.push(\"/login\")\n        } else {\n\n            if (!products || products.length === 0) {\n                dispatch(productListAction('', page))\n            }\n\n            if (successCreate) {\n                dispatch({\n                    type: PRODUCT_CREATE_ADMIN_RESET\n                })\n                dispatch(productListAction('', page))\n            }\n\n            if (successDelete) {\n                dispatch({\n                    type: PRODUCT_DELETE_ADMIN_RESET\n                })\n\n                dispatch(productListAction('', page))\n            }\n\n        }\n    }, [dispatch, history, userInfo, products, successCreate, successDelete, page])\n\n\n\n    const createProductHandler = () => {\n        dispatch(createProductAction());\n    }\n\n    const deleteProductHandler = (id) => {\n        dispatch(deleteProductAction(id));\n    }\n\n    return (\n        <>\n            <HelmetComp title={`Products || Admin`} description=\"Mask Shop\" />\n            <h2 className=\"my-3\">Products</h2>\n            <Button type=\"button\" variant=\"primary\" className=\"ml-0 my-3\" onClick={createProductHandler}><i className=\"fas fa-add\"></i> Create</Button>\n\n            {loadingCreate && <Loader />}\n            {errorCreate && <Message variant=\"danger\">{errorCreate}</Message>}\n            {loadingDelete && <Loader />}\n            {errorDelete && <Message variant=\"danger\">{errorDelete}</Message>}\n            {loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n                <>\n                    <Table hover bordered responsive className=\"table-sm\">\n                        <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>Name</th>\n                                <th>Brand</th>\n                                <th>Category</th>\n                                <th>Price</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {products.map((product) => {\n                                return <tr key={product._id}>\n                                    <td><Link to={`/productDetails/${product._id}`}>{product._id}</Link></td>\n                                    <td>{product.name}</td>\n                                    <td>{product.brand}</td>\n                                    <td>{product.category}</td>\n                                    <td>$ {product.price}</td>\n                                    <td>\n                                        <Link to={`/admin/product/edit/${product._id}?page=${page}`}>\n                                            <Button\n                                                type=\"button\"\n                                                className=\"btn btn-light\"\n                                            ><i className=\"fas fa-edit\"></i></Button>\n                                        </Link>\n\n                                        <Button\n                                            type=\"button\"\n                                            className=\"btn btn-danger\"\n                                            onClick={() => deleteProductHandler(product._id)}\n                                        ><i className=\"fas fa-trash\"></i></Button>\n                                    </td>\n                                </tr>\n                            })}\n                        </tbody>\n                    </Table>\n                    <Paginate pageNumber={pageNumber} pages={pages} productAdmin={true} />\n                </>\n\n            )}\n        </>\n    )\n}\n\nexport default ProductsAdminScreen\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/Screens/ProductEditScreen.js",["230","231"],"import React, { useState, useEffect } from 'react'\nimport FormContainer from '../components/FormContainer';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { productDetailsAction, updateProductAction } from '../actions/productsActions';\nimport { PRODUCT_DETAILS_RESET, PRODUCT_UPDATE_ADMIN_RESET } from '../constants/productsConstants';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport HelmetComp from '../components/HelmetComp';\n\nconst ProductEditScreen = ({ match, history, location }) => {\n\n    const productId = match.params.id\n\n    const page = location.search ? location.search.split(\"=\")[1] : 1\n\n    const [name, setName] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [category, setCategory] = useState(\"\");\n    const [brand, setBrand] = useState(\"\");\n    const [image, setImage] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [countInStock, setCountInStock] = useState(\"\");\n    const [uploading, setUploading] = useState(false)\n\n\n\n    const dispatch = useDispatch();\n\n    const login = useSelector(state => state.login)\n    const { userInfo } = login\n\n\n    const productInfo = useSelector(state => state.productInfo);\n    const { loading, productDetails, error } = productInfo;\n\n    const updateProduct = useSelector(state => state.updateProduct)\n\n    const { loading: loadingUpdate, success, error: errorUpdate } = updateProduct\n\n\n    useEffect(() => {\n        return () => {\n            dispatch({\n                type: PRODUCT_DETAILS_RESET\n            })\n        }\n    }, [])\n\n\n\n    useEffect(() => {\n        if (!userInfo || !userInfo.isAdmin) {\n            history.push(\"/login\")\n        } else {\n            if (!productDetails || !productDetails.name || productDetails._id !== productId) {\n                dispatch(productDetailsAction(productId))\n            } else {\n                setName(productDetails.name)\n                setDescription(productDetails.description)\n                setCategory(productDetails.category)\n                setBrand(productDetails.brand);\n                setImage(productDetails.image);\n                setPrice(productDetails.price);\n                setCountInStock(productDetails.countInStock)\n            }\n\n\n            if (success) {\n                dispatch({\n                    type: PRODUCT_UPDATE_ADMIN_RESET\n                })\n\n                history.push(`/admin/products/${page}`)\n            }\n        }\n    }, [dispatch, history, userInfo, productDetails, success])\n\n\n\n    const updateProductHandler = (e) => {\n        e.preventDefault();\n\n        dispatch(updateProductAction({\n            _id: productId,\n            name,\n            description,\n            category,\n            brand,\n            image,\n            price,\n            countInStock\n\n        }))\n    }\n\n\n    const uploadImageHandler = async (e) => {\n\n        e.preventDefault();\n\n        const file = e.target.files[0];\n\n        const formData = new FormData();\n\n        formData.append('image', file)\n\n        try {\n            setUploading(true);\n\n            const config = {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            }\n\n            const { data } = await axios.post(\"/api/uploads\", formData, config);\n\n            setImage(data)\n            setUploading(false)\n\n        } catch (error) {\n            console.error(error);\n            setUploading(false)\n\n        }\n\n    }\n\n\n    return (\n        <>\n            <HelmetComp title={`${productDetails.name}`} description=\"Mask Shop\" />\n            <Link to=\"/admin/products/1\">\n                <Button type=\"button\" variant=\"light\">Back</Button>\n            </Link>\n\n            {loading ? <Loader /> : error ? <Message variant=\"danger\">{error}</Message> : (\n                <FormContainer>\n                    <h2 className=\"my-3\">Update Product</h2>\n                    {loadingUpdate && <Loader />}\n                    {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\n                    <Form onSubmit={updateProductHandler}>\n                        <Form.Group controlId=\"name\">\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Name\"\n                                value={name}\n                                onChange={e => setName(e.target.value)}\n                            />\n\n                        </Form.Group>\n\n                        <Form.Group controlId=\"description\">\n                            <Form.Label>Description</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Description\"\n                                value={description}\n                                onChange={e => setDescription(e.target.value)}\n                            />\n\n                        </Form.Group>\n\n                        <Form.Group controlId=\"category\">\n                            <Form.Label>Caetgory</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Category\"\n                                value={category}\n                                onChange={e => setCategory(e.target.value)}\n                            />\n\n                        </Form.Group>\n\n                        <Form.Group controlId=\"brand\">\n                            <Form.Label>Brand</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Brand\"\n                                value={brand}\n                                onChange={e => setBrand(e.target.value)}\n                            />\n\n                        </Form.Group>\n\n                        <Form.Group controlId=\"image\">\n                            <Form.Label>Image</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Enter Image\"\n                                value={image}\n                                onChange={e => setImage(e.target.value)}\n                            />\n\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.File id=\"exampleFormControlFile1\" label=\"Upload Image\"\n                                onChange={(e) => uploadImageHandler(e)} custom\n                            />\n                        </Form.Group>\n                        {uploading && <Loader />}\n\n                        <Form.Group controlId=\"price\">\n                            <Form.Label>Price</Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                placeholder=\"Enter Price\"\n                                value={price}\n                                onChange={e => setPrice(e.target.value)}\n                            />\n\n                        </Form.Group>\n\n                        <Form.Group controlId=\"countInStock\">\n                            <Form.Label>Count In Stock</Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                placeholder=\"Enter Count In Stock\"\n                                value={countInStock}\n                                onChange={e => setCountInStock(e.target.value)}\n                            />\n\n                        </Form.Group>\n\n                        <Button type=\"submit\" variant=\"primary\">Update</Button>\n                    </Form>\n                </FormContainer>\n            )}\n        </>\n    )\n}\n\nexport default ProductEditScreen\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/reducers/productsReducers.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/reducers/userReducers.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/reducers/paymentReducer.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/reducers/cartReducers.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/reducers/orderReducers.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/components/Paginate.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/components/SearchBox.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/components/Loader.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/components/CarouselComp.js",["232"],"import React, { useEffect } from 'react'\nimport { Carousel, Image } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { topProductsAction } from '../actions/productsActions';\nimport Loader from './Loader';\nimport Message from './Message';\nimport { Link } from \"react-router-dom\"\nconst CarouselComp = () => {\n\n    const dispatch = useDispatch()\n\n    const topProducts = useSelector(state => state.topProducts)\n\n    useEffect(() => {\n        dispatch(topProductsAction())\n    }, [])\n\n    const { loading: loadingTop, products: productsTop, error: errorTop } = topProducts\n    return (\n        <>\n            {loadingTop ? <Loader /> : errorTop ? <Message variant=\"danger\">{errorTop}</Message> : (\n                <Carousel className=\"bg-dark\" variant=\"dark\">\n                    {productsTop.map((product) => {\n                        return <Carousel.Item key={product._id}>\n                            <Link to={`/productDetails/${product._id}`}>\n                                <Image src={product.image} alt={product.name} fluid />\n                            </Link>\n\n                            <Link to={`/productDetails/${product._id}`}>\n                                <Carousel.Caption>\n                                    <h3>{product.name} (${product.price})</h3>\n                                </Carousel.Caption>\n                            </Link>\n\n\n                        </Carousel.Item>\n                    })}\n                </Carousel>\n            )}\n\n        </>\n    )\n}\n\nexport default CarouselComp\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/components/Message.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/components/Rating.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/components/HelmetComp.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/components/Products.js",["233","234","235"],"import React from 'react'\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport Rating from './Rating';\nimport { Link } from 'react-router-dom';\n\nconst Products = ({ product }) => {\n    return (\n        <Card className=\"p-2\">\n            <Link to={`/productDetails/${product._id}`}>\n                <Card.Img src={product.image} alt={product.name} variant=\"top\" />\n            </Link>\n\n            <Card.Body>\n                <Link to={`/productDetails/${product._id}`}>\n                    <Card.Title as=\"div\" className=\"my-2\">{product.name}</Card.Title>\n                </Link>\n\n                <Card.Text as=\"div\" className=\"py-2\">\n                    <Rating rating={product.rating} /> ({product.numReviews})\n                </Card.Text>\n                <Card.Text as=\"h3\"><strong>${product.price}</strong></Card.Text>\n\n            </Card.Body>\n        </Card >\n    )\n}\n\nexport default Products\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/components/FormContainer.js",["236"],"import React from 'react'\nimport { Row, Col, Container } from 'react-bootstrap';\n\nconst FormContainer = ({ children }) => {\n    return (\n        <Row>\n\n            <Col md={{ span: 6, offset: 3 }}>\n                {children}\n            </Col>\n        </Row>\n    )\n}\n\nexport default FormContainer\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/actions/userActions.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/actions/productsActions.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/actions/cartActions.js",["237"],"import { CART_ADD, CART_ADD_RESET, CART_DELETE } from '../constants/cartConstants';\n\n\n\nexport const addTocartAction = (cartItem) => (dispatch, getState) => {\n\n    console.log(\"cartItem\", cartItem)\n\n    dispatch({\n        type: CART_ADD,\n        payload: cartItem\n    });\n\n    const cart = getState().cart;\n    const { cartItems } = cart\n\n\n    localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n}\n\n\n\nexport const deleteCartAction = (id) => (dispatch, getState) => {\n\n    dispatch({\n        type: CART_DELETE,\n        payload: id\n    })\n\n    const cart = getState().cart;\n\n    const { cartItems } = cart;\n\n    localStorage.setItem(\"cartItems\", JSON.stringify(cartItems))\n}","/Users/piyush/Desktop/MERN/eshop/frontend/src/constants/orderConstants.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/constants/productsConstants.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/constants/cartConstants.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/constants/userConstants.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/constants/paymentConstans.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/actions/orderActions.js",[],"/Users/piyush/Desktop/MERN/eshop/frontend/src/components/CheckoutComp.js",["238","239"],"import React from 'react';\nimport { Col, Row, Container } from 'react-bootstrap';\nimport FormContainer from '../components/FormContainer';\n\nconst CheckoutComp = ({ step1, step2, step3, step4 }) => {\n    return (\n        <Row className=\"my-4\">\n\n            <Col md={2}></Col>\n\n\n            <span>\n                {step1 ? (\n                    <h5 style={{ color: \"green\" }} className=\"mr-3\">User Logged In &#10230;</h5>\n                ) : (\n                        <h5 className=\"mr-3\">User Logged In &#10230;</h5>\n                    )}\n            </span>\n\n            <span >\n                {step2 ? (\n                    <h5 style={{ color: \"green\" }} className=\"mr-3\">Shipping Address &#10230;</h5>\n                ) : (\n                        <h5 className=\"mr-3\">Shipping Address &#10230;</h5>\n                    )}\n            </span>\n\n            <span>\n                {step3 ? (\n                    <h5 style={{ color: \"green\" }} className=\"mr-3\">Payment Method &#10230;</h5>\n                ) : (\n                        <h5 className=\"mr-3\">Payment Method &#10230;</h5>\n                    )}\n            </span>\n\n            <span>\n                {step4 ? (\n                    <h5 style={{ color: \"green\" }} className=\"mr-3\">Place Order   </h5>\n                ) : (\n                        <h5 className=\"mr-3\">Place Order</h5>\n                    )}\n            </span>\n\n\n            <Col md={2}></Col>\n        </Row>\n\n    )\n}\n\nexport default CheckoutComp\n","/Users/piyush/Desktop/MERN/eshop/frontend/src/actions/paymentActions.js",[],{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","severity":1,"message":"245","line":2,"column":20,"nodeType":"246","messageId":"247","endLine":2,"endColumn":24},{"ruleId":"244","severity":1,"message":"248","line":2,"column":26,"nodeType":"246","messageId":"247","endLine":2,"endColumn":32},{"ruleId":"244","severity":1,"message":"249","line":2,"column":34,"nodeType":"246","messageId":"247","endLine":2,"endColumn":42},{"ruleId":"250","severity":1,"message":"251","line":29,"column":8,"nodeType":"252","endLine":29,"endColumn":10,"suggestions":"253"},{"ruleId":"250","severity":1,"message":"251","line":44,"column":8,"nodeType":"252","endLine":44,"endColumn":10,"suggestions":"254"},{"ruleId":"244","severity":1,"message":"255","line":1,"column":17,"nodeType":"246","messageId":"247","endLine":1,"endColumn":25},{"ruleId":"244","severity":1,"message":"256","line":1,"column":27,"nodeType":"246","messageId":"247","endLine":1,"endColumn":36},{"ruleId":"250","severity":1,"message":"257","line":27,"column":8,"nodeType":"252","endLine":27,"endColumn":18,"suggestions":"258"},{"ruleId":"244","severity":1,"message":"259","line":22,"column":22,"nodeType":"246","messageId":"247","endLine":22,"endColumn":29},{"ruleId":"250","severity":1,"message":"257","line":36,"column":8,"nodeType":"252","endLine":36,"endColumn":18,"suggestions":"260"},{"ruleId":"244","severity":1,"message":"261","line":6,"column":10,"nodeType":"246","messageId":"247","endLine":6,"endColumn":27},{"ruleId":"250","severity":1,"message":"251","line":43,"column":8,"nodeType":"252","endLine":43,"endColumn":10,"suggestions":"262"},{"ruleId":"250","severity":1,"message":"251","line":47,"column":8,"nodeType":"252","endLine":47,"endColumn":14,"suggestions":"263"},{"ruleId":"250","severity":1,"message":"251","line":32,"column":8,"nodeType":"252","endLine":32,"endColumn":10,"suggestions":"264"},{"ruleId":"244","severity":1,"message":"265","line":37,"column":13,"nodeType":"246","messageId":"247","endLine":37,"endColumn":20},{"ruleId":"250","severity":1,"message":"266","line":88,"column":8,"nodeType":"252","endLine":88,"endColumn":46,"suggestions":"267"},{"ruleId":"250","severity":1,"message":"251","line":36,"column":8,"nodeType":"252","endLine":36,"endColumn":10,"suggestions":"268"},{"ruleId":"250","severity":1,"message":"251","line":41,"column":8,"nodeType":"252","endLine":41,"endColumn":14,"suggestions":"269"},{"ruleId":"250","severity":1,"message":"251","line":34,"column":8,"nodeType":"252","endLine":34,"endColumn":10,"suggestions":"270"},{"ruleId":"250","severity":1,"message":"251","line":38,"column":8,"nodeType":"252","endLine":38,"endColumn":14,"suggestions":"271"},{"ruleId":"250","severity":1,"message":"272","line":58,"column":8,"nodeType":"252","endLine":58,"endColumn":52,"suggestions":"273"},{"ruleId":"250","severity":1,"message":"251","line":49,"column":8,"nodeType":"252","endLine":49,"endColumn":10,"suggestions":"274"},{"ruleId":"250","severity":1,"message":"275","line":76,"column":8,"nodeType":"252","endLine":76,"endColumn":52,"suggestions":"276"},{"ruleId":"244","severity":1,"message":"277","line":3,"column":25,"nodeType":"246","messageId":"247","endLine":3,"endColumn":28},{"ruleId":"244","severity":1,"message":"278","line":3,"column":30,"nodeType":"246","messageId":"247","endLine":3,"endColumn":33},{"ruleId":"250","severity":1,"message":"251","line":38,"column":8,"nodeType":"252","endLine":38,"endColumn":10,"suggestions":"279"},{"ruleId":"250","severity":1,"message":"251","line":42,"column":8,"nodeType":"252","endLine":42,"endColumn":14,"suggestions":"280"},{"ruleId":"250","severity":1,"message":"251","line":50,"column":8,"nodeType":"252","endLine":50,"endColumn":10,"suggestions":"281"},{"ruleId":"250","severity":1,"message":"282","line":79,"column":8,"nodeType":"252","endLine":79,"endColumn":62,"suggestions":"283"},{"ruleId":"250","severity":1,"message":"251","line":16,"column":8,"nodeType":"252","endLine":16,"endColumn":10,"suggestions":"284"},{"ruleId":"244","severity":1,"message":"277","line":2,"column":10,"nodeType":"246","messageId":"247","endLine":2,"endColumn":13},{"ruleId":"244","severity":1,"message":"278","line":2,"column":15,"nodeType":"246","messageId":"247","endLine":2,"endColumn":18},{"ruleId":"244","severity":1,"message":"248","line":2,"column":26,"nodeType":"246","messageId":"247","endLine":2,"endColumn":32},{"ruleId":"244","severity":1,"message":"285","line":2,"column":20,"nodeType":"246","messageId":"247","endLine":2,"endColumn":29},{"ruleId":"244","severity":1,"message":"286","line":1,"column":20,"nodeType":"246","messageId":"247","endLine":1,"endColumn":34},{"ruleId":"244","severity":1,"message":"285","line":2,"column":20,"nodeType":"246","messageId":"247","endLine":2,"endColumn":29},{"ruleId":"244","severity":1,"message":"287","line":3,"column":8,"nodeType":"246","messageId":"247","endLine":3,"endColumn":21},"no-native-reassign",["288"],"no-negated-in-lhs",["289"],"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Carousel' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["290"],["291"],"'useState' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["292"],"'success' is assigned a value but never used.",["293"],"'USER_UPDATE_RESET' is defined but never used.",["294"],["295"],["296"],"'loading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'order._id', and 'sdkReady'. Either include them or remove the dependency array.",["297"],["298"],["299"],["300"],["301"],"React Hook useEffect has a missing dependency: 'users.length'. Either include it or remove the dependency array.",["302"],["303"],"React Hook useEffect has missing dependencies: 'page' and 'userId'. Either include them or remove the dependency array.",["304"],"'Row' is defined but never used.","'Col' is defined but never used.",["305"],["306"],["307"],"React Hook useEffect has missing dependencies: 'page' and 'productId'. Either include them or remove the dependency array.",["308"],["309"],"'Container' is defined but never used.","'CART_ADD_RESET' is defined but never used.","'FormContainer' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"310","fix":"311"},{"desc":"310","fix":"312"},{"desc":"313","fix":"314"},{"desc":"313","fix":"315"},{"desc":"310","fix":"316"},{"desc":"317","fix":"318"},{"desc":"310","fix":"319"},{"desc":"320","fix":"321"},{"desc":"310","fix":"322"},{"desc":"317","fix":"323"},{"desc":"310","fix":"324"},{"desc":"317","fix":"325"},{"desc":"326","fix":"327"},{"desc":"310","fix":"328"},{"desc":"329","fix":"330"},{"desc":"310","fix":"331"},{"desc":"317","fix":"332"},{"desc":"310","fix":"333"},{"desc":"334","fix":"335"},{"desc":"310","fix":"336"},"Update the dependencies array to be: [dispatch]",{"range":"337","text":"338"},{"range":"339","text":"338"},"Update the dependencies array to be: [history, userInfo]",{"range":"340","text":"341"},{"range":"342","text":"341"},{"range":"343","text":"338"},"Update the dependencies array to be: [dispatch, page]",{"range":"344","text":"345"},{"range":"346","text":"338"},"Update the dependencies array to be: [history, userInfo, redirect, success, dispatch, order._id, sdkReady]",{"range":"347","text":"348"},{"range":"349","text":"338"},{"range":"350","text":"345"},{"range":"351","text":"338"},{"range":"352","text":"345"},"Update the dependencies array to be: [dispatch, history, userInfo, success, page, users.length]",{"range":"353","text":"354"},{"range":"355","text":"338"},"Update the dependencies array to be: [dispatch, history, userInfo, user, success, userId, page]",{"range":"356","text":"357"},{"range":"358","text":"338"},{"range":"359","text":"345"},{"range":"360","text":"338"},"Update the dependencies array to be: [dispatch, history, userInfo, productDetails, success, productId, page]",{"range":"361","text":"362"},{"range":"363","text":"338"},[1039,1041],"[dispatch]",[1476,1478],[815,825],"[history, userInfo]",[1043,1053],[1576,1578],[1651,1657],"[dispatch, page]",[957,959],[2846,2884],"[history, userInfo, redirect, success, dispatch, order._id, sdkReady]",[1184,1186],[1262,1268],[1188,1190],[1263,1269],[1700,1744],"[dispatch, history, userInfo, success, page, users.length]",[1606,1608],[2191,2235],"[dispatch, history, userInfo, user, success, userId, page]",[1447,1449],[1527,1533],[1719,1721],[2612,2666],"[dispatch, history, userInfo, productDetails, success, productId, page]",[514,516]]